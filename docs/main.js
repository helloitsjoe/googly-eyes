/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
eval("const orientation = document.getElementById('orientation');\nconst motion = document.getElementById('motion');\nconst media = document.getElementById('media');\n\nwindow.addEventListener('drop', e => {\n  e.preventDefault();\n  console.log(e.dataTransfer.files[0]);\n  const reader = new FileReader();\n  const [file] = e.dataTransfer.files;\n  reader.readAsDataURL(file);\n  reader.onloadend = e => {\n    const img = document.getElementById('main-img');\n    const dropZone = document.getElementById('drop-zone');\n    img.src = reader.result;\n    img.style.display = 'flex';\n    dropZone.style.display = 'none';\n  };\n});\n\nwindow.addEventListener('dragstart', e => {\n  e.preventDefault();\n});\n\nwindow.addEventListener('dragover', e => {\n  e.preventDefault();\n});\n\nwindow.requestPermission = () => {\n  if (typeof DeviceOrientationEvent !== 'undefined') {\n    orientation.textContent = `DeviceOrientation: ${Object.keys(\n      DeviceOrientationEvent\n    )}`;\n    DeviceOrientationEvent.requestPermission()\n      .then(permissionState => {\n        if (permissionState !== 'granted') {\n          orientation.textContent = 'Permission denied';\n          return;\n        }\n\n        window.addEventListener('deviceorientation', e => {\n          orientation.textContent = JSON.stringify(\n            {\n              absolute: Math.round(e.absolute),\n              alpha: Math.round(e.alpha),\n              beta: Math.round(e.beta),\n              gamma: Math.round(e.gamma),\n            },\n            null,\n            2\n          );\n        });\n\n        window.addEventListener('devicemotion', e => {\n          motion.textContent = JSON.stringify(\n            {\n              acceleration: {\n                x: Math.round(e.acceleration.x),\n                y: Math.round(e.acceleration.y),\n                z: Math.round(e.acceleration.z),\n              },\n              accelerationIncludingGravity: {\n                x: Math.round(e.accelerationIncludingGravity.x),\n                y: Math.round(e.accelerationIncludingGravity.y),\n                z: Math.round(e.accelerationIncludingGravity.z),\n              },\n              rotationRate: {\n                alpha: Math.round(e.rotationRate.alpha),\n                beta: Math.round(e.rotationRate.beta),\n                gamma: Math.round(e.rotationRate.gamma),\n              },\n              // 0.016\n              // interval: Math.round(e.interval),\n            },\n            null,\n            2\n          );\n        });\n      })\n      .catch(console.error);\n  } else {\n    orientation.textContent = 'DeviceOrientationEvent is undefined';\n  }\n};\n// const getUserMedia = navigator;\n// document.getElementById('media').textContent = `getUserMedia: ${getUserMedia}`;\n// if (getUserMedia) {\n//   console.log(`getUserMedia:`, getUserMedia);\n//   getUserMedia({ photo: true }).then(stream => {\n//     console.log(stream);\n//     document.getElementById('media').textContent = stream;\n//   });\n// } else {\n//   console.log('getUserMedia is not defined');\n// }\n\n\n//# sourceURL=webpack://googly-eyes/./src/index.js?");
/******/ })()
;